const request = require('request-promise-native');
const containsAny = require('strman').containsAny;
const util = require('util');
const sleep = util.promisify(setTimeout); // Node.js utility function to promisify setTimeout

function catalogURL(board) {
    return `https://a.4cdn.org/${board}/catalog.json`;
}

function threadURL(board, threadNumber) {
    return `https://a.4cdn.org/${board}/thread/${threadNumber}.json`;
}

function imageURL(board, tim, ext) {
    return `https://i.4cdn.org/${board}/${tim}${ext}`;
}

function threadHasTopic(thread, topics) {
    if (thread.com != null && containsAny(thread.com, topics, false))
        return true;
    if (thread.sub != null && containsAny(thread.sub, topics, false))
        return true;
    if (thread.semantic_url != null && containsAny(thread.semantic_url, topics, false))
        return true;
    return false;
}

async function threadsWithTopics(boards, keywords) {
    let allOnTopicThreads = [];
    
    for (let board of boards) {
        await sleep(1000); // Delay for 1 second

        let catalog = await request(catalogURL(board), {
            json: true
        });

        let onTopicThreads = [];
        catalog.forEach(page => {
            page.threads.forEach(thread => {
                if (threadHasTopic(thread, keywords)) {
                    onTopicThreads.push({
                        url: threadURL(board, thread.no),
                        semantic_url: thread.semantic_url
                    });
                }
            });
        });

        allOnTopicThreads = allOnTopicThreads.concat(onTopicThreads);
    }

    return allOnTopicThreads;
}

async function threadMediaLinks(threadURL) {
    let board = threadURL.split("/")[3];
    let thread = await request(threadURL, {
        json: true
    });

    let mediaLinks = [];
    thread.posts.forEach(post => {
        if (post.ext != null) {
            mediaLinks.push(imageURL(board, post.tim, post.ext));
        }
    });

    return mediaLinks;
}

module.exports = { threadsWithTopics, threadMediaLinks };
